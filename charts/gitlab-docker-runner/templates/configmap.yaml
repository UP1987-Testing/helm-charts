apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "gitlab-docker-runner.fullname" . }}
  labels: {{- include "gitlab-docker-runner.labels" . | nindent 4 }}
data:
  entrypoint: |
    #!/bin/bash
    set -e
    
    # Run pre-entrypoint-script
    if ! bash /configmaps/pre-entrypoint-script; then
      exit 1
    fi
    
    # Start the runner
    exec /entrypoint run --user=gitlab-runner \
      --working-directory=/home/gitlab-runner

  config.toml: |
    concurrent = {{ .Values.concurrent }}
    check_interval = {{ .Values.checkInterval }}
    log_level = {{ default "info" .Values.logLevel | quote }}
    {{- if .Values.logFormat }}
    log_format = {{ .Values.logFormat | quote }}
    {{- end }}
    {{- if .Values.metrics.enabled }}
    listen_address = ':9252'
    {{- end }}
    {{- if .Values.sentryDsn }}
    sentry_dsn = "{{ .Values.sentryDsn }}"
    {{- end }}

  {{ if .Values.runners.config }}
  config.template.toml: {{ tpl (toYaml .Values.runners.config) $ | indent 2 }}
  {{ end }}

  configure: |
    set -e
    
    if [[ ! -f /home/gitlab-runner/.gitlab-runner/config.toml ]]; then
      cp /configmaps/config.toml /home/gitlab-runner/.gitlab-runner/
      if [[ -f /init-secrets/runner-registration-token ]]; then
        export REGISTRATION_TOKEN=$(cat /init-secrets/runner-registration-token)
      fi
      # Register the runner
      if ! sh /configmaps/register-the-runner; then
        exit 1
      fi
    fi
  register-the-runner: |
    #!/bin/bash
    MAX_REGISTER_ATTEMPTS=30

    for i in $(seq 1 "${MAX_REGISTER_ATTEMPTS}"); do
      echo "Registration attempt ${i} of ${MAX_REGISTER_ATTEMPTS}"
      /entrypoint register \
        --executor docker \
        --custom_build_dir-enabled \
        --run-untagged \
        --docker-image {{ .Values.runners.defaultImage }} \
        --docker-volumes '/cache:/cache' \
        --docker-volumes '/builds:/builds' \
        --docker-volumes '/var/run/docker.sock:/var/run/docker.sock' \
        --docker-helper-image-flavor {{ .Values.runners.helperImageFlavor }} \
        --docker-pull-policy {{ .Values.runners.dockerPullPolicy }} \
        {{- if and (hasKey .Values.runners "name") .Values.runners.name }}
        --name={{ .Values.runners.name | quote -}} \
        {{- end }}
        {{- range $key, $value := .Values.runners.env }}
        --env {{ $key | quote -}} = {{- $value | quote }} \
        {{- end }}
        {{- if and (hasKey .Values.runners "runUntagged") .Values.runners.runUntagged }}
        --run-untagged=true \
        {{- end }}
        {{- if and (hasKey .Values.runners "protected") .Values.runners.protected }}
        --access-level="ref_protected" \
        {{- end }}
        {{- if .Values.runners.config }}
        --template-config /configmaps/config.template.toml \
        {{- end }}
        --non-interactive

      retval=$?

      if [ ${retval} = 0 ]; then
        break
      elif [ ${i} = ${MAX_REGISTER_ATTEMPTS} ]; then
        exit 1
      fi

      sleep 5
    done

    exit 0

  check-live: |
    #!/bin/bash
    if /usr/bin/pgrep -f .*register-the-runner; then
      exit 0
    elif /usr/bin/pgrep gitlab.*runner; then
      exit 0
    else
      exit 1
    fi

  pre-entrypoint-script: |
{{ .Values.preEntrypointScript | default "" | indent 4 }}

{{ if not (empty .Values.configMaps) }}{{ toYaml .Values.configMaps | indent 2 }}{{ end }}
